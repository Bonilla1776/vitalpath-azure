# Generated by Django 5.2.1 on 2025-05-23 19:39

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DiscoveryData",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Public UUID for secure API references",
                        unique=True,
                    ),
                ),
                (
                    "preferred_name",
                    models.CharField(
                        help_text="How the user prefers to be addressed",
                        max_length=100,
                        verbose_name="Preferred Name",
                    ),
                ),
                (
                    "age",
                    models.PositiveIntegerField(
                        help_text="User's age in years",
                        validators=[
                            django.core.validators.MinValueValidator(18),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Age",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("non-binary", "Non-binary"),
                            ("prefer-not-to-say", "Prefer not to say"),
                        ],
                        max_length=20,
                        verbose_name="Gender Identity",
                    ),
                ),
                (
                    "height_feet",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(8),
                        ],
                        verbose_name="Height (Feet)",
                    ),
                ),
                (
                    "height_inches",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(11),
                        ],
                        verbose_name="Height (Inches)",
                    ),
                ),
                (
                    "weight",
                    models.PositiveIntegerField(
                        help_text="Weight in pounds",
                        validators=[
                            django.core.validators.MinValueValidator(70),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name="Weight (lbs)",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        help_text="City, State, or general location",
                        max_length=100,
                        verbose_name="Location",
                    ),
                ),
                (
                    "marital_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("single", "Single"),
                            ("married", "Married"),
                            ("divorced", "Divorced"),
                            ("widowed", "Widowed"),
                            ("separated", "Separated"),
                            ("in-relationship", "In a Relationship"),
                            ("prefer-not-to-say", "Prefer not to say"),
                        ],
                        max_length=20,
                        verbose_name="Relationship Status",
                    ),
                ),
                (
                    "goal_1",
                    models.CharField(
                        help_text="User's top priority health goal",
                        max_length=200,
                        verbose_name="Primary Health Goal",
                    ),
                ),
                (
                    "goal_2",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Secondary Health Goal"
                    ),
                ),
                (
                    "goal_3",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Tertiary Health Goal"
                    ),
                ),
                (
                    "baseline_fulfillment",
                    models.IntegerField(
                        default=50,
                        help_text="Overall satisfaction with life achievements and direction",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Baseline Life Fulfillment",
                    ),
                ),
                (
                    "baseline_happiness",
                    models.IntegerField(
                        default=50,
                        help_text="General emotional state and life satisfaction",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Baseline Subjective Well-being",
                    ),
                ),
                (
                    "baseline_energy",
                    models.IntegerField(
                        default=50,
                        help_text="Physical and mental energy levels throughout the day",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Baseline Energy Vitality",
                    ),
                ),
                (
                    "baseline_sleep",
                    models.IntegerField(
                        default=50,
                        help_text="Quality and restorative nature of sleep",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Baseline Sleep Quality",
                    ),
                ),
                (
                    "baseline_activity",
                    models.IntegerField(
                        default=50,
                        help_text="Regular physical exercise and movement",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Baseline Physical Activity",
                    ),
                ),
                (
                    "baseline_nutrition",
                    models.IntegerField(
                        default=50,
                        help_text="Quality and balance of dietary choices",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Baseline Nutritional Wellness",
                    ),
                ),
                (
                    "baseline_stress",
                    models.IntegerField(
                        default=50,
                        help_text="Ability to cope with and recover from stressful situations",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Baseline Stress Resilience",
                    ),
                ),
                (
                    "baseline_purpose",
                    models.IntegerField(
                        default=50,
                        help_text="Clarity about life meaning and direction",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Baseline Sense of Purpose",
                    ),
                ),
                (
                    "baseline_motivation",
                    models.IntegerField(
                        default=50,
                        help_text="Readiness and desire for positive lifestyle changes",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Baseline Change Motivation",
                    ),
                ),
                (
                    "baseline_confidence",
                    models.IntegerField(
                        default=50,
                        help_text="Belief in ability to successfully make and maintain changes",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Baseline Self-Efficacy",
                    ),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time taken to complete the discovery assessment",
                        null=True,
                        verbose_name="Completion Time (Minutes)",
                    ),
                ),
                (
                    "sections_completed",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of assessment sections completed",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(3),
                        ],
                        verbose_name="Sections Completed",
                    ),
                ),
                (
                    "goals_selected",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of health goals selected by user",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(3),
                        ],
                        verbose_name="Goals Selected",
                    ),
                ),
                (
                    "avg_wellness_score",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Average of all baseline wellness indicators",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Average Wellness Score",
                    ),
                ),
                (
                    "form_interactions",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of form field interactions during completion",
                        verbose_name="Form Interactions",
                    ),
                ),
                (
                    "page_revisits",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times user went back to previous sections",
                        verbose_name="Page Revisits",
                    ),
                ),
                (
                    "saved_progress",
                    models.BooleanField(
                        default=False,
                        help_text="Whether user's progress was auto-saved during completion",
                        verbose_name="Progress Saved",
                    ),
                ),
                (
                    "completion_device_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of device used to complete assessment",
                        max_length=50,
                        verbose_name="Completion Device",
                    ),
                ),
                (
                    "completion_browser",
                    models.CharField(
                        blank=True,
                        help_text="Browser used to complete assessment",
                        max_length=100,
                        verbose_name="Completion Browser",
                    ),
                ),
                (
                    "completion_quality_score",
                    models.FloatField(
                        blank=True,
                        help_text="Calculated quality score based on response patterns (0.0-1.0)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Completion Quality Score",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the discovery assessment was first submitted",
                        verbose_name="Submitted At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the discovery data was last modified",
                        verbose_name="Last Updated",
                    ),
                ),
                (
                    "data_version",
                    models.CharField(
                        default="1.0",
                        help_text="Version of the data collection schema used",
                        max_length=10,
                        verbose_name="Data Schema Version",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discovery_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Discovery Assessment",
                "verbose_name_plural": "Discovery Assessments",
                "ordering": ["-submitted_at"],
            },
        ),
        migrations.CreateModel(
            name="DiscoverySession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("session_start", models.DateTimeField(auto_now_add=True)),
                ("session_end", models.DateTimeField(blank=True, null=True)),
                ("last_active_section", models.PositiveIntegerField(default=1)),
                ("is_completed", models.BooleanField(default=False)),
                (
                    "section_1_time",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time spent on section 1 (seconds)",
                        null=True,
                    ),
                ),
                (
                    "section_2_time",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time spent on section 2 (seconds)",
                        null=True,
                    ),
                ),
                (
                    "section_3_time",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time spent on section 3 (seconds)",
                        null=True,
                    ),
                ),
                ("user_agent", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("screen_resolution", models.CharField(blank=True, max_length=20)),
                (
                    "discovery_data",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to="discovery.discoverydata",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discovery_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Discovery Session",
                "verbose_name_plural": "Discovery Sessions",
                "ordering": ["-session_start"],
            },
        ),
        migrations.AddIndex(
            model_name="discoverydata",
            index=models.Index(
                fields=["submitted_at"], name="discovery_d_submitt_5aa8dd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="discoverydata",
            index=models.Index(fields=["uuid"], name="discovery_d_uuid_550500_idx"),
        ),
        migrations.AddIndex(
            model_name="discoverydata",
            index=models.Index(fields=["user"], name="discovery_d_user_id_f391df_idx"),
        ),
        migrations.AddIndex(
            model_name="discoverydata",
            index=models.Index(
                fields=["completion_quality_score"],
                name="discovery_d_complet_6ed5e3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="discoverydata",
            index=models.Index(
                fields=["duration_minutes"], name="discovery_d_duratio_d9a094_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="discoverysession",
            index=models.Index(
                fields=["user", "session_start"], name="discovery_d_user_id_95448b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="discoverysession",
            index=models.Index(
                fields=["is_completed"], name="discovery_d_is_comp_0de696_idx"
            ),
        ),
    ]
